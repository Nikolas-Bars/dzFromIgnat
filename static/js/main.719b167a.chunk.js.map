{"version":3,"sources":["p2-homeworks/h1/Message.module.css","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.module.css","p2-homeworks/h3/Greeting.module.css","p2-homeworks/h4/HW4.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h1/Message.tsx","p2-homeworks/h1/HW1.tsx","p2-homeworks/h2/Affair.tsx","p2-homeworks/h2/Affairs.tsx","p2-homeworks/h2/HW2.tsx","p2-homeworks/h3/Greeting.tsx","p2-homeworks/h3/GreetingContainer.tsx","p2-homeworks/h3/HW3.tsx","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx","p2-homeworks/h4/HW4.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","s","message","avatar","src","alt","data","name","messageText","blockTime","time","messageData","HW1","Affair","onClick","deleteAffairCallback","affair","_id","priority","Affairs","mappedAffairs","map","a","key","onChangeInput","event","someText","currentTarget","value","setText","setError","addAffair","text","trim","setAffairs","length","useState","error","style","border","onChange","color","setFilter","defaultAffairs","HW2","affairs","filter","filteredAffairs","el","filterAffairs","deleteAffair","Greeting","setNameCallback","addUser","totalUsers","inputClass","someClass","placeholder","GreetingContainer","users","addUserCallback","setName","e","console","log","alert","HW3","setUsers","user","v1","SuperInputText","type","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","input","errorInput","superInput","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","HW4","showAlert","checked","setChecked","column","blue","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"yHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,KAAO,sBAAsB,KAAO,sBAAsB,YAAc,6BAA6B,UAAY,2BAA2B,KAAO,wB,kBCAzOD,EAAOC,QAAU,CAAC,WAAa,mCAAmC,MAAQ,8BAA8B,WAAa,mCAAmC,aAAe,qCAAqC,MAAQ,gC,kBCApND,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,0B,gBCAlED,EAAOC,QAAU,CAAC,KAAO,kBAAkB,OAAS,oBAAoB,cAAgB,6B,gBCAxFD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,2B,gBCA/DD,EAAOC,QAAU,CAAC,SAAW,gCAAgC,cAAgB,uC,kBCA7ED,EAAOC,QAAU,CAAC,IAAM,mB,yKCyBTC,MAhBf,SAAiBC,GACb,OACI,yBAAKC,UAAWC,IAAEC,SAEhB,yBAAKF,UAAWC,IAAEE,QAAQ,yBAAKC,IAAKL,EAAMI,OAAQE,IAAK,cAErD,yBAAKL,UAAWC,IAAEK,MACd,yBAAKN,UAAWC,IAAEM,MAAlB,IAA0BR,EAAMQ,MAChC,0BAAMP,UAAWC,IAAEO,aAAcT,EAAMG,SACvC,yBAAKF,UAAWC,IAAEQ,WAAW,0BAAMT,UAAWC,IAAES,MAAOX,EAAMW,UChBvEC,EACM,qFADNA,EAEI,QAFJA,EAGO,wDAHPA,EAII,QAgBKC,MAbf,WACI,OACI,6BACI,kBAAC,EAAD,CACIT,OAAQQ,EACRJ,KAAMI,EACNT,QAASS,EACTD,KAAMC,M,cCIPE,MAZf,SAAgBd,GAKZ,OACI,6BACI,4BAAQe,QANO,WACnBf,EAAMgB,qBAAqBhB,EAAMiB,OAAOC,OAKpC,KADJ,IACiDlB,EAAMiB,OAAOT,KAD9D,IACqER,EAAMiB,OAAOE,WC2D3EC,MA9Df,SAAiBpB,GACb,IAAMqB,EAAgBrB,EAAMO,KAAKe,KAAI,SAACC,GAAD,OACjC,kBAAC,EAAD,CACIC,IAAKD,EAAEL,IACPD,OAAQM,EAERP,qBAAsBhB,EAAMgB,0BAQ9BS,EAAe,SAACC,GAClB,IAAIC,EAAWD,EAAME,cAAcC,MACnC7B,EAAM8B,QAAQH,GACdI,EAAS,OAGPC,EAAW,WACY,KAAtBhC,EAAMiC,KAAKC,QAKVlC,EAAMmC,WAAN,CAAkB,CAACjB,IAAKlB,EAAMO,KAAK6B,OAAO,EAAG5B,KAAMR,EAAMiC,KAAMd,SAAU,SAAzE,mBAAqFnB,EAAMO,QAC3FwB,EAAS,MACT/B,EAAM8B,QAAQ,KANdC,EAAS,UAtBqB,EAgCdM,mBAAyB,MAhCX,mBAgCjCC,EAhCiC,KAgC1BP,EAhC0B,KA0CtC,OACI,6BAEI,6BACKO,EAAO,6BAAK,2BAAOC,MAZlB,CACVC,OAAQ,iBAWkCX,MAAO7B,EAAMiC,KAAMQ,SAAUhB,IAAgB,4BAAQV,QAASiB,GAAjB,OAAwC,6BAA/G,IAAqH,yBAAKO,MARvH,CACnBG,MAAO,QAO8H,uJACvH,6BAAK,2BAAQb,MAAO7B,EAAMiC,KAAMQ,SAAUhB,IAAgB,4BAAQV,QAASiB,GAAjB,SAKnEX,EAED,4BAAQN,QA5CD,WAAOf,EAAM2C,UAAU,SA4C9B,OACA,4BAAQ5B,QA5CA,WAAOf,EAAM2C,UAAU,UA4C/B,QACA,4BAAQ5B,QA5CE,WAAOf,EAAM2C,UAAU,YA4CjC,UACA,4BAAQ5B,QA5CD,WAAOf,EAAM2C,UAAU,SA4C9B,SCzDNC,EAAoC,CACtC,CAAC1B,IAAK,EAAGV,KAAM,QAASW,SAAU,QAClC,CAACD,IAAK,EAAGV,KAAM,QAASW,SAAU,OAClC,CAACD,IAAK,EAAGV,KAAM,QAASW,SAAU,OAClC,CAACD,IAAK,EAAGV,KAAM,OAAQW,SAAU,QACjC,CAACD,IAAK,EAAGV,KAAM,aAAcW,SAAU,WAqD5B0B,EAnCH,WAAO,IAAD,EACgBR,mBAA4BO,GAD5C,mBACPE,EADO,KACEX,EADF,OAEcE,mBAAqB,OAFnC,mBAEPU,EAFO,KAECJ,EAFD,KAIRK,EAfmB,SAACF,EAA4BC,GACtD,MAAe,QAAXA,EAAyBD,EAAQC,QAAO,SAAAE,GAAE,OAAIA,KACnC,QAAXF,EAAyBD,EAAQC,QAAO,SAAAE,GAAE,MAAoB,QAAhBA,EAAG9B,YACtC,SAAX4B,EAA0BD,EAAQC,QAAO,SAAAE,GAAE,MAAoB,SAAhBA,EAAG9B,YACvC,WAAX4B,EAA4BD,EAAQC,QAAO,SAAAE,GAAE,MAAoB,WAAhBA,EAAG9B,iBAAxD,EAWwB+B,CAAcJ,EAASC,GAJjC,EASIV,mBAAS,QATb,mBASbJ,EATa,KASPH,EATO,KAYd,OACI,6BACI,6BADJ,cAKI,kBAAC,EAAD,CACIG,KAAMA,EACN1B,KAAMyC,EACNL,UAAWA,EACX3B,qBAjBiB,SAACE,GAAD,OAAiBiB,EAVtB,SAACW,EAA4B5B,GACrD,OAAO4B,EAAQC,QAAO,SAAAE,GAAE,OAAIA,EAAG/B,MAAQA,KASkBiC,CAAaL,EAAS5B,KAkBnEY,QAASA,EACTK,WAAYA,IAGhB,6BAGA,+B,gBCtCGiB,EAhB+B,SAAC,GAEzC,IADD5C,EACA,EADAA,KAAM6C,EACN,EADMA,gBAAiBC,EACvB,EADuBA,QAAShB,EAChC,EADgCA,MAAOiB,EACvC,EADuCA,WAElCC,EAAalB,EAAQpC,IAAEoC,MAAQpC,IAAEuD,UAGvC,OACI,6BACI,2BAAOC,YAAa,qBAAsB7B,MAAOrB,EAAMiC,SAAUY,EAAiBpD,UAAWuD,IAC7F,8BAAOlB,GACP,4BAAQvB,QAASuC,GAAjB,OACA,8BAAOC,KC0BJI,EAnCiD,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,gBAAqB,EAClExB,mBAAiB,IADiD,mBACnF7B,EADmF,KAC7EsD,EAD6E,OAEhEzB,mBAAyB,MAFuC,mBAEnFC,EAFmF,KAE5EP,EAF4E,KAsBpFwB,EAAaK,EAAMxB,OAEzB,OACI,kBAAC,EAAD,CACI5B,KAAMA,EACN6C,gBAvBgB,SAACU,GACrB,IAAI9B,EAAO8B,EAAEnC,cAAcC,MAC3BiC,EAAQ7B,GACRF,EAAS,MACTiC,QAAQC,IAAIzD,IAoBR8C,QAlBQ,WACQ,KAAhB9C,EAAK0B,QACL2B,EAAgBrD,GAChBsD,EAAQ,IACRI,MAAM,UAAD,OAAW1D,EAAX,OAELuB,EAAS,UAaTO,MAAOA,EACPiB,WAAYA,K,QCTTY,MAxBf,WAAgB,IAAD,EACe9B,mBAA0B,IADzC,mBACJuB,EADI,KACGQ,EADH,KAQX,OACI,6BACI,6BADJ,cAKI,kBAAC,EAAD,CAAmBR,MAAOA,EAAOC,gBAXjB,SAACrD,GACrB,IAAI6D,EAAO,CAACnD,IAAKoD,cAAM9D,KAAMA,GAC7B4D,EAAS,CAACC,GAAF,mBAAWT,QAWf,6BAGA,+B,uBCsBGW,EArC2C,SAAC,GAUtD,EARGC,KAQF,IAPE/B,EAOH,EAPGA,SAAUgC,EAOb,EAPaA,aACVC,EAMH,EANGA,WAAYC,EAMf,EANeA,QACZrC,EAKH,EALGA,MACArC,EAIH,EAJGA,UAAW2E,EAId,EAJcA,cAERC,EAEN,6GAcKC,EAAkB,UAAM5E,IAAEoC,MAAR,YAAiBsC,GAAgC,IACnEG,EAAmB,UAAM7E,IAAE8E,MAAR,YAAiB1C,EAAQpC,IAAE+E,WAAa/E,IAAEgF,WAA1C,YAAwDjF,GAEjF,OACI,oCACI,yCAAOuE,KAAM,OAAQ/B,SAlBJ,SAACsB,GACtBtB,GAAYA,EAASsB,GAErBU,GAAgBA,EAAaV,EAAEnC,cAAcC,QAeQ6C,WAb9B,SAACX,GACxBW,GAAcA,EAAWX,GAEzBY,GACa,UAAVZ,EAAEvC,KACFmD,KAQkF1E,UAAW8E,GACpFF,IAEPvC,GAAS,0BAAMrC,UAAW6E,GAAqBxC,K,iCCpB7C6C,EAjBqC,SAAC,GAK/C,IAHEC,EAGH,EAHGA,IAAKnF,EAGR,EAHQA,UACF4E,EAEN,mCAEKQ,EAAc,UAAMD,EAAMlF,IAAEkF,IAAMlF,IAAEoF,QAAtB,YAAiCrF,GAErD,OACI,0CACIA,UAAWoF,GACPR,K,iBCmBDU,EA9ByC,SAAC,GASpD,EAPGf,KAOH,EANG/B,SAMH,EANa+C,gBAMZ,IALEvF,EAKH,EALGA,UACAwF,GAIH,EALcb,cAKd,EAJGa,UAEGZ,EAEN,4FAKKE,EAAmB,UAAM7E,IAAEwF,SAAR,YAAoBzF,GAAwB,IAErE,OACI,+BACI,yCACIuE,KAAM,WACN/B,SAVa,SAACsB,KAWd9D,UAAW8E,GAEPF,IAEPY,GAAY,0BAAMxF,UAAWC,IAAE0E,eAAgBa,KCkC7CE,MAhEf,WAAgB,IAAD,EACatD,mBAAiB,IAD9B,mBACJJ,EADI,KACEH,EADF,KAELQ,EAAQL,EAAO,GAAK,QAEpB2D,EAAY,WACVtD,EACA4B,MAAM,gFAENA,MAAMjC,IARH,EAYmBI,oBAAkB,GAZrC,mBAYJwD,EAZI,KAYKC,EAZL,KAeX,OACI,6BACI,6BADJ,cAII,yBAAK7F,UAAWC,IAAE6F,QACd,kBAAC,EAAD,CAAgBlE,MAAOI,EAAMwC,aAAc3C,EAAS6C,QAASiB,EAAWtD,MAASA,IADrF,KAII,kBAAC,EAAD,CAAgBrC,UAAWC,IAAE8F,OAK7B,kBAAC,EAAD,gBAIA,kBAAC,EAAD,CAAaZ,KAAG,EAACrE,QAAS6E,GAA1B,WAIA,kBAAC,EAAD,CAAaK,UAAQ,GAArB,YAMA,kBAAC,EAAD,CACIJ,QAASA,EACTL,gBAAiBM,GAFrB,cAQA,kBAAC,EAAD,CAAeD,QAASA,EAASpD,SAtCxB,SAACsB,GAAD,OAAsC+B,EAAW/B,EAAEnC,cAAciE,aAyC9E,6BAKA,+BC5CGK,MAdf,WACI,OACI,yBAAKjG,UAAWC,IAAEgG,KACd,iDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFQC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAA7E,GACH0B,QAAQ1B,MAAMA,EAAMnC,c","file":"static/js/main.719b167a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3jngc\",\"avatar\":\"Message_avatar__3sTIy\",\"data\":\"Message_data__3W0Ch\",\"name\":\"Message_name__3jORL\",\"messageText\":\"Message_messageText__3oe08\",\"blockTime\":\"Message_blockTime__3wqoc\",\"time\":\"Message_time__3xgq2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__QDSt1\",\"input\":\"SuperInputText_input__2dOK2\",\"errorInput\":\"SuperInputText_errorInput__3xeL0\",\"errorInputOn\":\"SuperInputText_errorInputOn__3c1xM\",\"error\":\"SuperInputText_error__1A5oP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"someClass\":\"Greeting_someClass__3CjlR\",\"error\":\"Greeting_error__1mLOz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"HW4_blue__2gD4j\",\"column\":\"HW4_column__TPZPZ\",\"testSpanError\":\"HW4_testSpanError__3IZc_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__q_Y4J\",\"red\":\"SuperButton_red__1hg-g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__l-_PZ\",\"spanClassName\":\"SuperCheckbox_spanClassName__1NOvy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__kpRuI\"};","import React from 'react'\r\nimport s from \"./Message.module.css\"\r\n\r\ntype messagePropsType = {\r\n    avatar: string\r\n    name: string,\r\n    message: string,\r\n    time: string,\r\n}\r\n\r\nfunction Message(props: messagePropsType) {\r\n    return (\r\n        <div className={s.message}>\r\n\r\n          <div className={s.avatar}><img src={props.avatar} alt={'some ava'}/></div>\r\n\r\n            <div className={s.data}>\r\n                <div className={s.name}> {props.name}</div>\r\n                <span className={s.messageText}>{props.message}</span>\r\n                <div className={s.blockTime}><span className={s.time}>{props.time}</span></div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport Message from \"./Message\";\r\n\r\nconst messageData = {\r\n    avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\r\n    name: 'Artem',\r\n    message: 'npm start нажимал?',\r\n    time: '22:00',\r\n}\r\n\r\nfunction HW1() {\r\n    return (\r\n        <div>\r\n            <Message\r\n                avatar={messageData.avatar}\r\n                name={messageData.name}\r\n                message={messageData.message}\r\n                time={messageData.time}\r\n            />\r\n  </div>\r\n    )\r\n}\r\n\r\nexport default HW1\r\n","import React from 'react'\r\nimport {AffairType} from \"./HW2\";\r\n\r\ntype AffairPropsType = {\r\n    // key не нужно типизировать\r\n    affair: AffairType // need to fix any\r\n    deleteAffairCallback: (_id: number)=> void // need to fix any\r\n}\r\n\r\nfunction Affair(props: AffairPropsType) {\r\n    const deleteCallback = () => {\r\n        props.deleteAffairCallback(props.affair._id)\r\n    }// need to fix\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={deleteCallback}>X</button> {props.affair.name} {props.affair.priority}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Affair\r\n","import React, {useState} from 'react'\r\nimport Affair from './Affair'\r\nimport {AffairType, FilterType} from './HW2'\r\n\r\ntype AffairsPropsType = { // need to fix any\r\n    data: Array<AffairType>\r\n    setFilter: (filter: FilterType)=>void\r\n    deleteAffairCallback: (_id: number)=> void\r\n    text: string\r\n    setText: (text: string)=>void\r\n    setAffairs: (affairs: Array<AffairType>)=> void\r\n}\r\n\r\nfunction Affairs(props: AffairsPropsType) {\r\n    const mappedAffairs = props.data.map((a: AffairType) => (\r\n        <Affair // should work\r\n            key={a._id} // кеи ОБЯЗАТЕЛЬНЫ в 99% - так что лучше их писать всегда при создании компонент в мапе\r\n            affair={a}\r\n\r\n            deleteAffairCallback={props.deleteAffairCallback}\r\n        />\r\n    ))\r\n\r\n    const setAll = () => {props.setFilter('all')} // need to fix\r\n    const setHigh = () => {props.setFilter('high')}\r\n    const setMiddle = () => {props.setFilter('middle')}\r\n    const setLow = () => {props.setFilter('low')}\r\n    const onChangeInput =(event: any)=>{\r\n        let someText = event.currentTarget.value\r\n        props.setText(someText)\r\n        setError(null)\r\n    }\r\n\r\n    const addAffair =()=>{\r\n        if(props.text.trim() === ''){\r\n            setError('error')\r\n\r\n            return\r\n        }else {\r\n            props.setAffairs([{_id: props.data.length+1, name: props.text, priority: 'high'}, ...props.data])\r\n            setError(null)\r\n            props.setText('')\r\n        }\r\n    }\r\n\r\n    let [error, setError] = useState<null | 'error'>(null)\r\n\r\n    const style = {\r\n        border: '1px solid red',\r\n\r\n    }\r\n    const styleTextError = {\r\n        color: 'red'\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                {error ?<div><input style={style} value={props.text} onChange={onChangeInput}/><button onClick={addAffair}>Add</button><br/> <div style={styleTextError}>Обязательно для заполнения</div></div>\r\n                    : <div><input  value={props.text} onChange={onChangeInput}/><button onClick={addAffair}>Add</button></div>\r\n\r\n                }\r\n            </div>\r\n\r\n            {mappedAffairs}\r\n\r\n            <button onClick={setAll}>All</button>\r\n            <button onClick={setHigh}>High</button>\r\n            <button onClick={setMiddle}>Middle</button>\r\n            <button onClick={setLow}>Low</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Affairs\r\n","import React, {useState} from 'react'\r\nimport Affairs from './Affairs'\r\n\r\n// types\r\nexport type AffairPriorityType = 'high' | 'low' | 'middle' // need to fix any\r\nexport type AffairType = {\r\n    _id: number\r\n    name: string\r\n    priority: string\r\n} // need to fix any\r\nexport type FilterType = 'all' | AffairPriorityType\r\n\r\n// constants\r\nconst defaultAffairs: Array<AffairType> = [ // need to fix any\r\n    {_id: 1, name: 'React', priority: 'high'},\r\n    {_id: 2, name: 'anime', priority: 'low'},\r\n    {_id: 3, name: 'games', priority: 'low'},\r\n    {_id: 4, name: 'work', priority: 'high'},\r\n    {_id: 5, name: 'html & css', priority: 'middle'},\r\n]\r\n\r\n\r\n\r\n\r\n// pure helper functions\r\nexport const filterAffairs = (affairs: Array<AffairType>, filter: FilterType): any => { // need to fix any\r\n    if (filter === 'all') return affairs.filter(el => el)\r\n    if (filter === 'low') return affairs.filter(el => el.priority === 'low')\r\n    if (filter === 'high') return affairs.filter(el => el.priority === 'high')\r\n    if (filter === 'middle') return affairs.filter(el => el.priority === 'middle')\r\n}\r\nexport const deleteAffair = (affairs: Array<AffairType>, _id: number): any => { // need to fix any\r\n    return affairs.filter(el => el._id !== _id)\r\n}\r\n\r\n\r\nconst HW2 = () => {\r\n    const [affairs, setAffairs] = useState<Array<AffairType>>(defaultAffairs) // need to fix any\r\n    const [filter, setFilter] = useState<FilterType>('all')\r\n\r\n    const filteredAffairs = filterAffairs(affairs, filter)\r\n    const deleteAffairCallback = (_id: number) => setAffairs(deleteAffair(affairs, _id)) // need to fix any\r\n\r\n\r\n    /////////////////////////\r\nlet [text, setText] = useState('text')\r\n    /////////////////////////\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 2\r\n\r\n            {/*should work (должно работать)*/}\r\n            <Affairs\r\n                text={text}\r\n                data={filteredAffairs}\r\n                setFilter={setFilter}\r\n                deleteAffairCallback={deleteAffairCallback}\r\n                setText={setText}\r\n                setAffairs={setAffairs}\r\n            />\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeAffairs/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW2\r\n","import React, {ChangeEvent} from 'react'\r\nimport s from './Greeting.module.css'\r\n\r\ntype GreetingPropsType = {\r\n    name: string // need to fix any\r\n    setNameCallback: (e: ChangeEvent<HTMLInputElement>) => void // need to fix any\r\n    addUser: () => void // need to fix any\r\n    error: string | null // need to fix any\r\n    totalUsers: number // need to fix any\r\n}\r\n\r\n// презентационная компонента (для верстальщика)\r\nconst Greeting: React.FC<GreetingPropsType> = (\r\n    {name, setNameCallback, addUser, error, totalUsers} // деструктуризация пропсов\r\n) => {\r\n    const inputClass = error ? s.error : s.someClass// need to fix with (?:)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input placeholder={'what is your name?'} value={name} onChange={setNameCallback} className={inputClass}/>\r\n            <span>{error}</span>\r\n            <button onClick={addUser}>add</button>\r\n            <span>{totalUsers}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Greeting\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport Greeting from './Greeting'\r\nimport {UserType} from \"./HW3\";\r\n\r\ntype GreetingContainerPropsType = {\r\n    users: Array<UserType> // need to fix any\r\n    addUserCallback: (name: string) => void // need to fix any\r\n}\r\n\r\n// более простой и понятный для новичков\r\n// function GreetingContainer(props: GreetingPropsType) {\r\n\r\n// более современный и удобный для про :)\r\n// уровень локальной логики\r\nconst GreetingContainer: React.FC<GreetingContainerPropsType> = ({users, addUserCallback}) => { // деструктуризация пропсов\r\n    const [name, setName] = useState<string>('') // need to fix any\r\n    const [error, setError] = useState<null | 'error'>(null) // need to fix any\r\n\r\n    const setNameCallback = (e: ChangeEvent<HTMLInputElement>) => { // need to fix any\r\n        let text = e.currentTarget.value\r\n        setName(text)\r\n        setError(null)// need to fix\r\n        console.log(name)\r\n    }\r\n    const addUser = () => {\r\n        if (name.trim() !== '') {\r\n            addUserCallback(name)\r\n            setName('')\r\n            alert(`Hello, ${name}!`)\r\n        } else {\r\n            setError('error')\r\n        }\r\n\r\n        // need to fix\r\n    }\r\n\r\n    const totalUsers = users.length // need to fix\r\n\r\n    return (\r\n        <Greeting\r\n            name={name}\r\n            setNameCallback={setNameCallback}\r\n            addUser={addUser}\r\n            error={error}\r\n            totalUsers={totalUsers}\r\n        />\r\n    )\r\n}\r\n\r\nexport default GreetingContainer\r\n","import React, {useState} from 'react'\r\nimport GreetingContainer from './GreetingContainer'\r\nimport {v1} from \"uuid\";\r\n\r\n// types\r\nexport type UserType = {\r\n    _id: string // need to fix any\r\n    name: string // need to fix any\r\n}\r\n\r\n// уровень работы с глобальными данными\r\nfunction HW3() {\r\n    const [users, setUsers] = useState<Array<UserType>>([]) // need to fix any\r\n\r\n    const addUserCallback = (name: string) => { // need to fix any\r\n        let user = {_id: v1(), name: name}\r\n        setUsers([user, ...users]) // need to fix\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 3\r\n\r\n            {/*should work (должно работать)*/}\r\n            <GreetingContainer users={users} addUserCallback={addUserCallback}/>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeGreeting/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW3\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input type={'text'} onChange={onChangeCallback} onKeyPress={onKeyPressCallback} className={finalInputClassName}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n        )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport SuperInputText from './common/c1-SuperInputText/SuperInputText'\r\nimport s from './HW4.module.css'\r\nimport SuperButton from './common/c2-SuperButton/SuperButton'\r\nimport SuperCheckbox from './common/c3-SuperCheckbox/SuperCheckbox'\r\n\r\nfunction HW4() {\r\n    const [text, setText] = useState<string>('')\r\n    const error = text ? '' : 'error'\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert('введите текст...')\r\n        } else {\r\n            alert(text) // если нет ошибки показать текст\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked)\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 4\r\n\r\n            <div className={s.column}>\r\n                <SuperInputText value={text} onChangeText={setText} onEnter={showAlert} error = {error}/>  {/* // spanClassName={s.testSpanError}*/}\r\n\r\n\r\n                <SuperInputText className={s.blue} />{/* // проверьте, работает ли смешивание классов*/}\r\n\r\n\r\n                {/*----------------------------------------------------*/}\r\n\r\n                <SuperButton>\r\n                    default\r\n                </SuperButton>\r\n\r\n                <SuperButton red onClick={showAlert} >{/*// пропсу с булевым значением не обязательно указывать true*/}\r\n                     delete {/*// название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n\r\n                <SuperButton disabled>\r\n                    disabled\r\n                </SuperButton>\r\n\r\n                {/*----------------------------------------------------*/}\r\n\r\n                <SuperCheckbox\r\n                    checked={checked}\r\n                    onChangeChecked={setChecked}\r\n                >\r\n                    some text {/*// этот текст попадёт в children*/}\r\n                </SuperCheckbox>\r\n\r\n                {/*// onChange тоже должен работать*/}\r\n                <SuperCheckbox checked={checked} onChange={testOnChange}/>\r\n            </div>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperInputText/>*/}\r\n            {/*<AlternativeSuperButton/>*/}\r\n            {/*<AlternativeSuperCheckbox/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW4\r\n","import React from 'react'\r\nimport s from './App.module.css'\r\nimport HW1 from '../../../p2-homeworks/h1/HW1'\r\nimport HW2 from \"../../../p2-homeworks/h2/HW2\";\r\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\r\nimport HW4 from \"../../../p2-homeworks/h4/HW4\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            <HW1/>\r\n            <HW2/>\r\n            <HW3/>\r\n            <HW4/>\r\n            {/*<HW5/>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './p1-main/m1-ui/u1-app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}